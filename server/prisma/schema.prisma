generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./checkers.db"
}

model Account {
  id             Int            @id @default(autoincrement())
  ext_id         String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  loginAt        DateTime?
  logoutAt       DateTime?
  active         Boolean
  role           String
  refresh_tokens RefreshToken[]
  white_games    Game[]         @relation(name: "white")
  black_games    Game[]         @relation(name: "black")
  user           User?
}

model Game {
  id         Int      @id @default(autoincrement())
  ext_id     String   @unique
  type       String
  time_limit Int
  startedAt  DateTime @default(now())
  winner     String?
  id_white   Int
  id_black   Int
  white      Account  @relation(name: "white", fields: [id_white], references: [id])
  black      Account  @relation(name: "black", fields: [id_black], references: [id])
  plays      Play[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  content    String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id_account Int
  account    Account  @relation(fields: [id_account], references: [id])
}

model Play {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  time      Int
  capture   Boolean
  color     String
  index     Int
  start_x   Int
  start_y   Int
  target_x  Int
  target_y  Int
  id_game   Int
  game      Game     @relation(fields: [id_game], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String
  id_account Int      @unique
  account    Account  @relation(fields: [id_account], references: [id])
  user       Friend[] @relation(name: "user")
  friend     Friend[] @relation(name: "friend")
}

model Friend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  id_user   Int
  id_friend Int
  user      User     @relation(name: "user", fields: [id_user], references: [id])
  friend    User     @relation(name: "friend", fields: [id_friend], references: [id])

  @@unique([id_user, id_friend])
}